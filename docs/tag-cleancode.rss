<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>gruszka.dev</title><link></link><description>Things I would like to share</description><pubDate>Sun, 10 May 2020 00:00:00 GMT</pubDate><lastBuildDate>Wed, 04 Dec 2024 11:10:17 GMT</lastBuildDate><generator>marmite</generator><item><title>Clean Code</title><link>/cleancode.html</link><category>cleancode</category><guid>/cleancode.html</guid><pubDate>Sun, 10 May 2020 00:00:00 GMT</pubDate><source url="">tag-cleancode</source><content:encoded><![CDATA[<p>Pisanie czystego kodu nie jest łatwe i każdy, kto napisał trochę kodu w swoim życiu wie co mam na myśli.</p>
<p>Jestem obecnie na etapie lektury (a właściwie powrotu do) &quot;Clean Code&quot; Uncle Boba. Chciałbym wypunktować parę rzeczy, które znalazły się w książce i warto o nich pamiętać. Krótko i zwięźle:</p>
<ul>
<li>niech nazwy przedstawiają intencje i komunikują do czego są przeznaczone</li>
<li>unikanie dezinformacji (np. unikanie skrótów)
<pre><code class="language-php">$criteria zamiast $c
</code></pre>
</li>
<li>nie używamy magicznych liczb
<pre><code class="language-php">if($counter === 12)
</code></pre>
lepiej
<pre><code class="language-php">if($counter === ALLOWED_ENTRIES)
</code></pre>
</li>
<li>nie stosujemy notacji węgierskiej
<pre><code class="language-php">$strFirstName
</code></pre>
lepiej:
<pre><code class="language-php">$firstName
</code></pre>
</li>
<li>nie stosujemy prefiksu lub postfiksu <code>Interface</code>. Interfejs jest tylko abstrakcją
<pre><code class="language-php">interface CsvWriterInterface
</code></pre>
lepiej:
<pre><code class="language-php">interface CsvWriter
</code></pre>
</li>
<li>to że Ty wiesz, że zmienna <strong><code>r</code></strong> znaczy coś, nie znaczy, że ktoś inny jak będzie to czytał, to będzie też to wiedział</li>
<li>nazwy klas powinny być rzeczownikami lub wyrażeniami rzeczownikowymi
<pre><code class="language-php">class User {}
</code></pre>
</li>
<li>nazwy metod powinny być czasownikami lub wyrażeniami czasownikowymi
<pre><code class="language-php">function login() {}
</code></pre>
</li>
<li>akcesory, mutatory i predykaty powinny być poprzedzone przedrostkiem get, set, is</li>
<li>będź spójny w ramach bazy kodu - np. fetch, retrieve, get do analogicznych metod w róznych klasach</li>
<li>dodaj znaczący kontekst - wiele nazw nie niesie za sobą wystarczająco treści - konieczne jest umieszczenie nazw we właściwym kontekście przez wstawienie ich w odpowiednio nazwane klasy, funkcje i przestrzenie nazw</li>
<li>nie prefiksujemy nazw ogólnoznanym terminem np. &quot;Luksusowa Stacja Benzynowa&quot; używamy w nazwach jako LSBCustomer</li>
<li>twórz małe funkcje max. 20-30 wierszy</li>
<li>bloki w instrukcjach if, else, while i podobnych powinny mieć po jednym wierszu i prawdopodobnie wiersze te powinny być wywołaniem funkcji; oznacza to że funkcja nie może być na tyle duża, aby zawierała zagnieżdzone struktury, dlatego poziom wcięć w funkcji nie powinien przekraczać dwóch.</li>
<li>funkcje powinny wykonywać tylko jedną operację, powinny robić to dobrze. powinny robić tylko to.</li>
<li>długa opisowa nazwa jest lepsza niż krótka enigmatyczna</li>
<li>im mniej parametrów przekazywanych do funkcji tym lepiej (najlepiej zero), może trzeba je wydzielić jako parametry klasy</li>
<li>gdy funkcja wymaga więcej niż dwóch lub trzech argumentów, najprawdopodobniej niektóre z nich powinny być umieszczone w osobnej klasie.</li>
<li>jeśli funkcja musi zmieniać stan czegokolwiek, powinna zmieniać stan własnego obiektu</li>
<li>rozdzielanie poleceń i zapytań (funkcje powinny coś wykonywać lub odpowiadać na jakieś pytanie, ale nie powinny robić tych dwóch operacji jednocześnie)</li>
<li>powinniśmy stosować wyjątki zamiast obsługi błędów</li>
</ul>
]]></content:encoded></item></channel></rss>