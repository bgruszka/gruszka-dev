<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>gruszka.dev</title><link></link><description>Things I would like to share</description><pubDate>Fri, 19 Jun 2020 00:00:00 GMT</pubDate><lastBuildDate>Wed, 04 Dec 2024 11:10:17 GMT</lastBuildDate><generator>marmite</generator><item><title>Operacje bitowe</title><link>/operacje-bitowe.html</link><category>code</category><guid>/operacje-bitowe.html</guid><pubDate>Fri, 19 Jun 2020 00:00:00 GMT</pubDate><source url="">tag-code</source><content:encoded><![CDATA[<p>Operacje bitowe są wygodną formą manipulowania danymi.</p>
<p>Wyobraź sobie, że jesteś programistą i masz za zadanie napisac ważny element systemu operacyjnego. Powiedziano Ci, że możesz używać zmiennej przypisanej w następujący sposób:</p>
<pre><code class="language-python">flagRegister = 0x1234
</code></pre>
<p>Zmienna przechowuje informacje o różnych aspektach działania systemu. Każdy bit zmiennej przechowuje jedną wartość 0 / 1. Powiedziano Ci również, że tylko jeden z tych bitów należy do Ciebie - trzeci (bity są ponumerowane od zera; bit numer zero jest najniższy, a najwyższy to 31). Pozostałe bity nie mogą się zmieniać, ponieważ są przeznaczone do przechowywania innych danych. Oto twój bit oznaczony literą x →</p>
<p><code>flagRegister: 0000000000000000000000000000x000</code></p>
<p>Oto co możesz zrobic wykorzystując operacje bitowe:</p>
<ul>
<li>
<p>sprawdź stan swojego bitu - chcesz poznać wartość swojego bitu; możesz użyć następującej właściwości koniunkcji:</p>
<p><code>x &amp; 1 = x</code></p>
<p><code>x &amp; 0 = 0</code></p>
<p>Jeśli zastosujesz operację &amp; do zmiennej <code>flagRegister</code> wraz z następującym obrazem bitowym:
<code>0000000000000000000000000000001000</code>
(zwróć uwagę na 1 na pozycji bitu, który Cię interesuje), w wyniku czego otrzymujesz jeden z następujących ciągów bitów:</p>
<p><code>0000000000000000000000000000001000</code>, jeśli twój bit został ustawiony na 1</p>
<p><code>0000000000000000000000000000000000</code>, jeśli twój bit został ustawiony na 0</p>
<p>Taka sekwencja zer i jedynek, których zadaniem jest przechwycenie wartości lub zmiana wybranych bitów, nazywa się maską bitową. Zbudujmy maskę bitową, aby wykryć stan twojego bitu. Dla przypomnienia - jest to trzeci bit licząc od prawej (1000), czyli w tym przypadku 8. Odpowiednią maskę można utworzyć na podstawie następującej deklaracji:</p>
<pre><code class="language-python">mask = 8
</code></pre>
<p>Możesz wykonać sekwencję instrukcji w zależności od stanu twojego bitu:</p>
<pre><code class="language-python">if flagRegister &amp; mask:
    # my bit is set
else:
    # my bit is reset
</code></pre>
</li>
<li>
<p>zresetuj swój bit - przypisujesz zero do swojego bitu, podczas gdy wszystkie inne bity pozostają niezmienione; użyjmy tej samej właściwości koniunkcji, co poprzednio, ale użyjmy nieco innej maski - dokładnie tak jak poniżej:
111111111111111111111111111111<strong>0</strong>111</p>
<p>Zauważ, że maska została utworzona w wyniku zanegowania wszystkich bitów zmiennej <code>mask</code>. Resetowanie bitu jest proste i wygląda tak:</p>
<pre><code class="language-python">flagRegister = flagRegister &amp; ~mask
</code></pre>
<pre><code class="language-python">flagRegister &amp;= ~mask
</code></pre>
</li>
<li>
<p>ustaw swój bit - przypisujesz 1 do swojego bitu, podczas gdy wszystkie pozostałe bity muszą pozostać niezmienione; użyj następującej właściwości rozłączenia:</p>
<p><code>x | 1 = 1</code></p>
<p><code>x | 0 = x</code></p>
<p>Teraz możesz ustawić swój bit, wykonując jedną z poniższych instrukcji:</p>
<pre><code class="language-python">flagRegister = flagRegister | mask
</code></pre>
<pre><code class="language-python">flagRegister |= mask
</code></pre>
</li>
<li>
<p>Zaneguj swój bit - zamieniasz 1 na 0, a 0 na 1. Możesz użyć interesującej właściwości operatora xor:</p>
<p><code>x ^ 1 = ~ x</code></p>
<p><code>x ^ 0 = x</code></p>
<p>Zaneguj swój bit, wykonując poniższe instrukcje:</p>
<pre><code class="language-python">flagRegister = flagRegister ^ mask
</code></pre>
<pre><code class="language-python">flagRegister ^= mask
</code></pre>
</li>
</ul>
<p>Jak widzisz operacje bitowe są proste i jednocześnie efektywne :)</p>
]]></content:encoded></item></channel></rss>